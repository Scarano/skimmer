import unittest

from parser import dfs, transitive_closure


class TestDFS(unittest.TestCase):
    # This was originally generated by GPT4

    def test_empty_graph(self):
        visited = set()
        dfs('A', visited, {})
        self.assertEqual(visited, {'A'})

    def test_single_node(self):
        visited = set()
        dfs('A', visited, {'A': set()})
        self.assertEqual(visited, {'A'})

    def test_multiple_nodes(self):
        visited = set()
        dfs('A', visited, {'A': {'B'}, 'B': {'C'}, 'C': set()})
        self.assertEqual(visited, {'A', 'B', 'C'})

class TestTransitiveClosure(unittest.TestCase):
    # This was originally generated by GPT4

    def test_empty_dict(self):
        result = transitive_closure({}, ['A', 'B'])
        self.assertEqual(result, {'A': {'A'}, 'B': {'B'}})

    def test_single_node(self):
        result = transitive_closure({'A': set()}, ['A'])
        self.assertEqual(result, {'A': {'A'}})

    def test_multiple_nodes(self):
        graph = {'A': {'B'}, 'B': {'C'}, 'C': set()}
        keys = ['A', 'B', 'C']
        result = transitive_closure(graph, keys)
        self.assertEqual(result, {'A': {'A', 'B', 'C'}, 'B': {'B', 'C'}, 'C': {'C'}})


if __name__ == '__main__':
    unittest.main()
